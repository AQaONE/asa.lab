#include <stdlib.h>
#include <stdio.h>
#include <time.h>

typedef struct tabl
{
 double num;
 unsigned int time;
} tab;

void quicksort(tab *mas,unsigned long int low, unsigned long int high);

int main(int argc,char *argv[])
{
 int i,imin = 0,imax = 0;
 unsigned long int length=0,datemin,datemax;
 double Tstart,Tend,T,number=1.0;
 char c;
 FILE *f;
 tab *mas;
 struct tm m_time;
 time_t convert;
 
 //открытие файла
 if (argc>1)
 {
 f = fopen(argv[1],"rb");
 if (f==0)
 {
 printf("Enter correct file name\n");
 }
 }
 else
 {
 printf("No file name entered\n");
 }
 printf("Введине название файла еще раз\n");
 char *fname=(char *)malloc(1* sizeof(char));
 scanf("%s", fname);
 f = fopen(fname, "rs");
 if (f == NULL) {
 printf ("wrong");
 return 1;
 }
 
 //вычисление количества строк (число,время) в файле
 c=fgetc(f);
 while (c!=EOF)
 {
 if (c=='\n') ++length;
 c=fgetc(f);
 }
 printf("%lu\n", length);
 //выделение памяти под массив структур
 mas=(tab*)malloc(length*sizeof(tab));
 
 //ѕереход в начало файла
 fseek(f,0,SEEK_SET);
 
 //считывание из файла дробного числа mas[i].num и времени mas[i].time
 for (i=0; i<length; i++)
 {
 fscanf(f,"%lf,%u\n",&mas[i].num,&mas[i].time);
 }
 
 //подсчет времени начала сортировки, сортировка, подсчет времени конца сортировки, вычисление затраченного на нё времени
 Tstart=clock();
 quicksort(mas,0,length-1);
 Tend=clock();
 T=(Tend-Tstart)/(double)CLOCKS_PER_SEC;
 
 //вывод отсортированных пар (число,время)
 for (i=0; i<length; i++) {
 convert = mas[i].time;
 printf("%.9lf,%s\n",mas[i].num,ctime(&convert));
 }
 
 
 //если затраченное на сортировку время не равно 0, вывести его, а если равно, вывести, что оно - менее 0.001 секунды
 if (T!=0) printf("Estimated time to quicksort: %.9lf sec\n",T);
 else printf("Estimated time to quicksort: <0.001 sec\n");
 
 //перевод даты 1 января 1980 года в формат unix timestamp
 m_time.tm_sec = 0; m_time.tm_min = 0; m_time.tm_hour = 0;
 m_time.tm_mday = 1; m_time.tm_mon = 0; m_time.tm_year = 80;
 datemin=mktime(&m_time);
 
 //ѕеревод даты 31 декабря 1984 года в формат unix timestamp
 m_time.tm_sec = 0; m_time.tm_min = 0; m_time.tm_hour = 0;
 m_time.tm_mday = 31; m_time.tm_mon = 11; m_time.tm_year = 84;
 datemax=mktime(&m_time);
 
 //в отсортированном массиве
 //поиск индекса imin элемента массива, в котором время больше 1 января 1980 года
 for(i=0;i<length;i++)
 if (mas[i].time>datemin)
 {
 imin=i;
 break;
 }
 
 //поиск индекса imax элемента массива, в котором время меньше 31 декабря 1984 года
 for(i=0;i<length;i++)
 if (mas[i].time<datemax)
 imax=i;
 else break;
 
 //поиск минимального дробного числа между дат 1 января 1980 года и 31 декабря 1984 года
 for (i=imin;i<imax;i++) if (mas[i].num<number) number=mas[i].num;
 
 //вывод минимального дробного числа
 printf("The smallest number between 1 Jan 1980 and 31 Dec 1984 is %.9lf\n",number);
 
 //очистка массива структур
 free(mas);
 return 0;
}

//определение функции быстрой сортировки
void quicksort(tab *mas, unsigned long int low, unsigned long int high)
{
 unsigned long int l=low,r=high;
 static unsigned long int i,sred,min,max;
 tab temp;
 min=l;
 max=r;
 for (i=l; i<r; ++i)
 {
 if (mas[i].time > mas[max].time) max=i;
 if (mas[i].time < mas[min].time) min=i;
 }
 sred=(mas[max].time + mas[min].time)/2;
 while (l <= r)
 {
 while (mas[l].time < sred)
 {
 ++l;
 }
 while (mas[r].time > sred)
 {
 —r;
 }
 if (l <= r)
 {
 temp=mas[l];
 mas[l]=mas[r];
 mas[r]=temp;
 —r;
 ++l;
 }
 }
 if (low < r)
 quicksort(mas,low,r);
 if (high > l)
 quicksort(mas,l,high);
}
